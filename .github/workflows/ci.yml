name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '.github/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '.github/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.19"
      - name: Lint code
        run: |
          go vet ./...
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.19"
      - name: Run tests
        env:
          GOBIN: /home/runner/go/bin
        run: |
          # Install cli tools
          go install github.com/onsi/ginkgo/v2/ginkgo@latest
          
          # In seconds
          SLOW_SPEC_THRESHOLD="${SLOW_SPEC_THRESHOLD:-60s}"

          CGO_ENABLED=1 $GOBIN/ginkgo \
            -r \
            -race \
            -randomize-all \
            -randomize-suites \
            -keep-going \
            -slow-spec-threshold="${SLOW_SPEC_THRESHOLD}" \
            -cover \
            -covermode=atomic \
            -output-dir=. \
            -coverprofile=coverage.out
      - name: Collect coverage report
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          flags: unittests
          name: pivnet-product-stemcell-resource
          fail_ci_if_error: true
  vulnerability-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Vulnerability scan
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [lint, test, vulnerability-scan]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.19"
      - name: Login to registry
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ github.actor }} --password-stdin
      - name: Build Docker image
        run: |
          # Image name
          IMAGE="shanman190/pivnet-product-stemcell-resource"

          # Unique snapshot
          SNAPSHOT="${{ github.sha }}"

          go build -ldflags "-X main.version=dev.$SNAPSHOT" -o ./cmd/check/check ./cmd/check/main.go
          go build -ldflags "-X main.version=dev.$SNAPSHOT" -o ./cmd/in/in ./cmd/in/main.go
          go build -ldflags "-X main.version=dev.$SNAPSHOT" -o ./cmd/out/out ./cmd/out/main.go

          docker build --file Dockerfile --tag $IMAGE:$SNAPSHOT --tag $IMAGE:latest .

          docker push $IMAGE:$SNAPSHOT
          docker push $IMAGE:latest